apply plugin: 'maven-publish'

def gradlePluginVersion = project.hasProperty('mavPluginVersion') ? project.mavPluginVersion : 'master'
apply from: "https://raw.githubusercontent.com/tangkegaga/gradle-maven-plugin/${gradlePluginVersion}/utils.gradle"
apply from: "https://raw.githubusercontent.com/tangkegaga/gradle-maven-plugin/${gradlePluginVersion}/artifact-javadoc-handler.gradle"
apply from: "https://raw.githubusercontent.com/tangkegaga/gradle-maven-plugin/${gradlePluginVersion}/artifact-pom-manager.gradle"

project.afterEvaluate {

    task androidSourcesJar(type: Jar) {
        archiveClassifier.set('sources')
        from android.sourceSets.main.java.source
    }

    artifacts {
        archives androidSourcesJar
    }

    publishing {
        publications {
            library(MavenPublication) {
                setGroupId "$groupId"
                setArtifactId "$artifactId"
                version android.defaultConfig.versionName

                artifact bundleReleaseAar
                artifact androidSourcesJar

                decoratePom(pom)
            }
        }


        repositories {
            def isToRemoteRepo = getBooleanProperty("mavPublishToRemoteRepo")
            def isToInternalRepo = getBooleanProperty("mavPublishToInternalRepo")
            def isToMavenLocal = getBooleanProperty("mavPublishToMavenLocal")

            if (isToRemoteRepo) {
                maven {
                    credentials {
                        username getStringProperty("mavRemoteRepoUser")
                        password getStringProperty("mavRemoteRepoPassword")
                    }
                    url = getStringProperty("mavRepoRemoteUrl")
                }
            }

            if (isToInternalRepo) {
                maven {
                    url = getStringProperty("mavRepoInternalUrl")
                }
            }

            if (isToMavenLocal || (!isToInternalRepo && !isToRemoteRepo)) {
                mavenLocal()
            }
        }
    }
}
